// components/crm/CustomerForm.tsx
"use client";

import { useActionState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";
import { Loader2 } from "lucide-react";
import type { Resolver } from "react-hook-form"; // Import Resolver type
import { startTransition } from "react"


// --- START: SCHEMA AND INTERFACE DEFINITIONS ---

// Helper cho c√°c tr∆∞·ªùng string t√πy ch·ªçn, ƒë·∫£m b·∫£o lu√¥n l√† string sau transform
// S·ª≠ d·ª•ng .optional() ƒë·ªÉ n√≥i v·ªõi Zod r·∫±ng tr∆∞·ªùng n√†y c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c cung c·∫•p (undefined).
// H√†m transform s·∫Ω chuy·ªÉn undefined/null th√†nh chu·ªói r·ªóng.
const zOptionalString = z.string().optional().transform(val => val ?? "");

// Helper cho c√°c tr∆∞·ªùng URL t√πy ch·ªçn, ƒë·∫£m b·∫£o lu√¥n l√† string v√† x·ª≠ l√Ω chu·ªói r·ªóng h·ª£p l·ªá
// S·ª≠ d·ª•ng .optional() v√† transform t∆∞∆°ng t·ª±.
// Refine ƒë·ªÉ ki·ªÉm tra URL n·∫øu kh√¥ng ph·∫£i l√† chu·ªói r·ªóng.
const zOptionalUrl = z.string().optional().transform(val => val ?? "").refine(val => val === "" || z.string().url().safeParse(val).success, {
    message: "URL kh√¥ng h·ª£p l·ªá.",
});

// Zod Schema.
export const customerFormSchema = z.object({
    id: z.string().optional(),
    name: z.string().min(1, { message: "T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." }),
    code: z.string().optional(),
    type: z.enum(["individual", "company", "agency"], {
        required_error: "Vui l√≤ng ch·ªçn lo·∫°i kh√°ch h√†ng.",
    }),
    contactPerson: zOptionalString,
    // Cho email, cho ph√©p chu·ªói r·ªóng ho·∫∑c ph·∫£i l√† email h·ª£p l·ªá
    // `and` ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ √°p d·ª•ng th√™m m·ªôt validation SAU KHI transform.
    // N·∫øu email l√† "", n√≥ s·∫Ω v∆∞·ª£t qua `.or(z.literal(""))`.
    // N·∫øu c√≥ gi√° tr·ªã, n√≥ s·∫Ω ƒë∆∞·ª£c ki·ªÉm tra b·∫±ng `.email()`.
    email: zOptionalString.and(z.string().email({ message: "Email kh√¥ng h·ª£p l·ªá." }).or(z.literal(""))),
    phone: zOptionalString,
    address: zOptionalString,
    taxCode: zOptionalString,
    birthday: zOptionalString,
    notes: zOptionalString,
    source: z.enum(["other", "referral", "website", "event"], {
        required_error: "Vui l√≤ng ch·ªçn ngu·ªìn kh√°ch h√†ng.",
    }),
    //website: zOptionalUrl,
    //facebook: zOptionalUrl,
    //zalo: zOptionalString,
    avatarUrl: zOptionalUrl,

    // Gender v√† Status c√≥ .default(), nghƒ©a l√† ch√∫ng s·∫Ω KH√îNG BAO GI·ªú l√† undefined ho·∫∑c null trong CustomerFormData.
    gender: z.enum(["male", "female", "other"]).default("other"),
    status: z.enum(["active", "inactive", "lead"]).default("active"),
    tag: z.string().optional(), // tag l√† optional, s·∫Ω map sang null n·∫øu "all" khi l∆∞u DB
    ownerId: z.string().optional(), // ownerId l√† optional, s·∫Ω map sang null n·∫øu "none" khi l∆∞u DB
});

// CustomerFormData s·∫Ω ph·∫£n √°nh *output* c·ªßa Zod schema sau khi transform v√† default.
// C√°c tr∆∞·ªùng v·ªõi .default() ho·∫∑c .transform() s·∫Ω kh√¥ng c√≤n l√† optional v√† non-nullable.
export type CustomerFormData = z.infer<typeof customerFormSchema>;

interface CustomerTag {
    id: string;
    name: string;
}

interface User {
    id: string;
    name: string;
    email: string;
}

// Ki·ªÉu d·ªØ li·ªáu th√¥ t·ª´ database.
// Interface n√†y ƒë·ªãnh nghƒ©a nh·ªØng g√¨ b·∫°n mong ƒë·ª£i *tr·ª±c ti·∫øp t·ª´ DB*, c√≥ th·ªÉ l√† nullable ho·∫∑c optional.
export interface RawCustomerDataFromDB {
    id?: string | undefined;
    name: string;
    code?: string | undefined;
    email: string | null; // C√≥ th·ªÉ null t·ª´ DB
    phone?: string | null;
    address?: string | undefined;
    contact_person?: string | null;
    tax_code?: string | null;
    notes?: string | null;
    avatar_url?: string | null;
    birthday?: string | null;
    //facebook?: string | null;
    //zalo?: string | null;
    gender?: "other" | "male" | "female" | null;
    owner_id?: string | null;
    source?: "referral" | "website" | "event" | "other" | null;
    status?: "active" | "inactive" | "lead" | null;
    type?: "individual" | "company" | "agency" | null;
    tag_id?: string | null;
    //website?: string | null;
    created_at?: string;
    updated_at?: string;
}

// ƒê·ªãnh nghƒ©a ki·ªÉu state cho useActionState
interface ActionState {
    success: boolean
    error?: string
    id?: string // ‚úÖ th√™m d√≤ng n√†y
}

    interface CustomerFormProps {
    initialData?: RawCustomerDataFromDB | null;
    // ƒê·∫£m b·∫£o onSubmitAction LU√îN tr·∫£ v·ªÅ m·ªôt object c√≥ ki·ªÉu ActionState
    onSubmitAction: (formData: CustomerFormData) => Promise<ActionState>;
    tags: CustomerTag[];
    users: User[];
    isCustomerProfileEdit?: boolean;
}

// --- END: SCHEMA AND INTERFACE DEFINITIONS ---

// H√†m helper ƒë·ªÉ √°nh x·∫° RawCustomerDataFromDB sang CustomerFormData
// H√†m n√†y c·ª±c k·ª≥ quan tr·ªçng v√¨ n√≥ ƒë·∫£m b·∫£o ƒë·∫ßu ra kh·ªõp v·ªõi c√°c ki·ªÉu ch·∫∑t ch·∫Ω c·ªßa CustomerFormData.
const mapRawDataToFormData = (rawData: RawCustomerDataFromDB): CustomerFormData => {
    return {
        id: rawData.id,
        name: rawData.name,
        code: rawData.code ?? "", // Chuy·ªÉn undefined/null th√†nh ""
        type: rawData.type ?? "individual", // Cung c·∫•p gi√° tr·ªã m·∫∑c ƒë·ªãnh r√µ r√†ng n·∫øu null/undefined t·ª´ DB
        contactPerson: rawData.contact_person ?? "", // X·ª≠ l√Ω null t·ª´ DB ·ªü ƒë√¢y
        email: rawData.email ?? "",
        phone: rawData.phone ?? "",
        address: rawData.address ?? "",
        taxCode: rawData.tax_code ?? "",
        birthday: rawData.birthday ?? "",
        gender: rawData.gender ?? "other", // ƒê·∫£m b·∫£o gender lu√¥n l√† m·ªôt gi√° tr·ªã enum h·ª£p l·ªá
        status: rawData.status ?? "active", // ƒê·∫£m b·∫£o status lu√¥n l√† m·ªôt gi√° tr·ªã enum h·ª£p l·ªá
        tag: rawData.tag_id ?? "", // Gi·∫£ s·ª≠ "" l√† m·∫∑c ƒë·ªãnh/d·ª± ph√≤ng cho tags n·∫øu kh√¥ng c√≥ tag_id
        ownerId: rawData.owner_id ?? "", // Gi·∫£ s·ª≠ "" l√† m·∫∑c ƒë·ªãnh/d·ª± ph√≤ng cho owner n·∫øu kh√¥ng c√≥ owner_id
        notes: rawData.notes ?? "",
        source: rawData.source ?? "referral",
        //website: rawData.website ?? "",
        //facebook: rawData.facebook ?? "",
        //zalo: rawData.zalo ?? "",
        avatarUrl: rawData.avatar_url ?? "",
    };
};

// ƒê·ªãnh nghƒ©a d·ªØ li·ªáu form r·ªóng m·∫∑c ƒë·ªãnh cho kh√°ch h√†ng m·ªõi.
// C√°i n√†y ph·∫£i tu√¢n th·ªß CH·∫∂T CH·∫º CustomerFormData (t·ª©c l√† c√°c tr∆∞·ªùng optional s·∫Ω l√† "" ho·∫∑c gi√° tr·ªã default)
const defaultEmptyFormData: CustomerFormData = {
    name: "",
    code: "",
    type: "individual", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ schema
    contactPerson: "",
    email: "",
    phone: "",
    address: "",
    taxCode: "",
    birthday: "",
    gender: "other", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ schema
    status: "active", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ schema
    tag: "", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho tr∆∞·ªùng optional string
    ownerId: "", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho tr∆∞·ªùng optional string
    notes: "",
    source: "other",
    //website: "",
    //facebook: "",
    //zalo: "",
    avatarUrl: "",
};
export function CustomerForm({ onSubmitAction, initialData, tags, users, isCustomerProfileEdit }: CustomerFormProps) {
    const { register, handleSubmit, watch, setValue, formState: { errors }, setError, reset } = useForm<CustomerFormData>({
        // D√≤ng n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠a l·ªói ch√≠nh t·∫£ v√† th√™m type assertion
        resolver: zodResolver(customerFormSchema) as Resolver<CustomerFormData>,
        defaultValues: initialData ? mapRawDataToFormData(initialData) : defaultEmptyFormData,
    });

    const router = useRouter();

    // S·ª≠a l·ªói: Ch·ªâ ƒë·ªãnh r√µ r√†ng generic types cho useActionState
    
    const [state, dispatch, pendingAction] = useActionState<ActionState, CustomerFormData>(
        async (_, data) => {
            const result = await onSubmitAction(data)
            return result
        },
        { success: false, error: undefined, id: undefined } // ‚úÖ gi·ªù kh√¥ng l·ªói n·ªØa
    );
    // Watch gi√° tr·ªã c·ªßa c√°c select ƒë·ªÉ hi·ªÉn th·ªã
    const watchedType = watch("type");
    const watchedGender = watch("gender");
    const watchedStatus = watch("status");
    const watchedTag = watch("tag");
    const watchedOwnerId = watch("ownerId");
    const watchedSource = watch("source");

    // Khi initialData thay ƒë·ªïi, reset form
    useEffect(() => {
        if (initialData) {
            reset(mapRawDataToFormData(initialData));
        } else {
            reset(defaultEmptyFormData);
        }
    }, [initialData, reset]);

    // X·ª≠ l√Ω l·ªói t·ª´ Server Action
    useEffect(() => {
        if (state?.error) {
            if (state.error === "NEXT_REDIRECT") {
                // B·ªè qua l·ªói NEXT_REDIRECT trong dev, Next.js s·∫Ω x·ª≠ l√Ω redirect
            } else if (state.error.includes("M√£ kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i")) {
                setError("code", { type: "server", message: state.error });
            } else {
                console.error("L·ªói Server Action:", state.error);
                setError("root", { message: state.error });
            }
        }
    }, [state?.error, setError]);

    useEffect(() => {
        console.log("üì¶ State sau submit:", state)

        if (state?.success) {
            const target = state.id
                ? `/crm/customers/${state.id}`
                : initialData?.id
                    ? `/crm/customers/${initialData.id}`
                    : "/crm/customers"

            router.push(target)
            router.refresh() // ‚úÖ √©p reload l·∫°i trang
        }
    }, [state?.success, state?.id, initialData?.id])


    const handleCancel = () => {
        if (isCustomerProfileEdit) {
            router.push('/');
        } else {
            if (initialData?.id) {
                router.push(`/crm/customers/${initialData.id}`)
            } else {
                router.push("/crm/customers")
            }
        }
    };
    const onSubmit = (data: CustomerFormData) => {
        startTransition(() => {
            dispatch(data)
        })
    }

    return (
        <form onSubmit={handleSubmit(onSubmit)}>
            {initialData?.id && <input type="hidden" {...register("id")} />}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* T√™n Kh√°ch H√†ng */}
                <div>
                    <Label htmlFor="name">T√™n Kh√°ch H√†ng *</Label>
                    <Input id="name" {...register("name")} />
                    {errors.name?.message && <p className="text-red-500 text-sm">{errors.name.message}</p>}
                </div>

                {/* M√£ Kh√°ch H√†ng */}
                {!isCustomerProfileEdit && (
                    <div>
                        <Label htmlFor="code">M√£ Kh√°ch H√†ng</Label>
                        <Input
                            id="code"
                            {...register("code")}
                            readOnly={!!initialData?.code}
                            placeholder={initialData?.code || "M√£ s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông sinh (n·∫øu kh√¥ng nh·∫≠p)"}
                        />
                        {errors.code?.message && <p className="text-red-500 text-sm">{errors.code.message}</p>}
                    </div>
                )}
                {isCustomerProfileEdit && (
                    <input type="hidden" {...register("code")} />
                )}

                {/* Lo·∫°i Kh√°ch H√†ng */}
                {!isCustomerProfileEdit && (
                    <div>
                        <Label htmlFor="type">Lo·∫°i Kh√°ch H√†ng</Label>
                        <Select value={watchedType} onValueChange={(value: CustomerFormData["type"]) => setValue("type", value)}>
                            <SelectTrigger id="type">
                                <SelectValue placeholder="Ch·ªçn lo·∫°i" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="individual">C√° nh√¢n</SelectItem>
                                <SelectItem value="company">Doanh nghi·ªáp</SelectItem>
                                <SelectItem value="agency">C∆° quan</SelectItem>
                            </SelectContent>
                        </Select>
                        {errors.type?.message && <p className="text-red-500 text-sm">{errors.type.message}</p>}
                    </div>
                )}
                {isCustomerProfileEdit && <input type="hidden" {...register("type")} />}

                {/* Ng∆∞·ªùi Li√™n H·ªá Ch√≠nh */}
                <div>
                    <Label htmlFor="contactPerson">Ng∆∞·ªùi Li√™n H·ªá Ch√≠nh</Label>
                    <Input id="contactPerson" {...register("contactPerson")} />
                    {errors.contactPerson?.message && <p className="text-red-500 text-sm">{errors.contactPerson.message}</p>}
                </div>

                {/* Email */}
                <div>
                    <Label htmlFor="email">Email</Label>
                    <Input id="email" type="email" {...register("email")} readOnly={!!initialData?.id && isCustomerProfileEdit} />
                    {errors.email?.message && <p className="text-red-500 text-sm">{errors.email.message}</p>}
                </div>
                {/* S·ªë ƒêi·ªán Tho·∫°i */}
                <div>
                    <Label htmlFor="phone">S·ªë ƒêi·ªán Tho·∫°i</Label>
                    <Input id="phone" type="tel" {...register("phone")} />
                    {errors.phone?.message && <p className="text-red-500 text-sm">{errors.phone.message}</p>}
                </div>
                {/* ƒê·ªãa Ch·ªâ */}
                <div>
                    <Label htmlFor="address">ƒê·ªãa Ch·ªâ</Label>
                    <Input id="address" {...register("address")} />
                    {errors.address?.message && <p className="text-red-500 text-sm">{errors.address.message}</p>}
                </div>
                {/* M√£ S·ªë Thu·∫ø */}
                {!isCustomerProfileEdit && (watchedType === "company" || watchedType === "agency") && (
                    <div>
                        <Label htmlFor="taxCode">M√£ S·ªë Thu·∫ø</Label>
                        <Input id="taxCode" {...register("taxCode")} />
                        {errors.taxCode?.message && <p className="text-red-500 text-sm">{errors.taxCode.message}</p>}
                    </div>
                )}
                {isCustomerProfileEdit && <input type="hidden" {...register("taxCode")} />}

                {/* Ng√†y Sinh / Ng√†y Th√†nh L·∫≠p */}
                <div>
                    <Label htmlFor="birthday">Ng√†y Sinh / Ng√†y Th√†nh L·∫≠p</Label>
                    <Input id="birthday" type="date" {...register("birthday")} />
                    {errors.birthday?.message && <p className="text-red-500 text-sm">{errors.birthday.message}</p>}
                </div>
                {/* Gi·ªõi T√≠nh */}
                {!isCustomerProfileEdit && (watchedType === "individual" || watchedType === "company" || watchedType === "agency") && (
                    <div>
                        <Label htmlFor="gender">Gi·ªõi T√≠nh</Label>
                        <Select value={watchedGender} onValueChange={(value: CustomerFormData["gender"]) => setValue("gender", value)}>
                            <SelectTrigger id="gender">
                                <SelectValue placeholder="Ch·ªçn gi·ªõi t√≠nh" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="other">Kh√¥ng x√°c ƒë·ªãnh</SelectItem>
                                <SelectItem value="male">Nam</SelectItem>
                                <SelectItem value="female">N·ªØ</SelectItem>
                            </SelectContent>
                        </Select>
                        {errors.gender?.message && <p className="text-red-500 text-sm">{errors.gender.message}</p>}
                    </div>
                )}
                {isCustomerProfileEdit && <input type="hidden" {...register("gender")} />}

                {/* Tr·∫°ng Th√°i */}
                {!isCustomerProfileEdit && (
                    <div>
                        <Label htmlFor="status">Tr·∫°ng Th√°i</Label>
                        <Select value={watchedStatus} onValueChange={(value: CustomerFormData["status"]) => setValue("status", value)}>
                            <SelectTrigger id="status">
                                <SelectValue placeholder="Ch·ªçn tr·∫°ng th√°i" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="none">Kh√¥ng x√°c ƒë·ªãnh</SelectItem>
                                <SelectItem value="active">ƒêang ho·∫°t ƒë·ªông</SelectItem>
                                <SelectItem value="inactive">Kh√¥ng ho·∫°t ƒë·ªông</SelectItem>
                                <SelectItem value="lead">Ti·ªÅm nƒÉng</SelectItem>
                            </SelectContent>
                        </Select>
                        {errors.status?.message && <p className="text-red-500 text-sm">{errors.status.message}</p>}
                    </div>
                )}
                {isCustomerProfileEdit && <input type="hidden" {...register("status")} />}

                {/* Nh√£n */}
                {!isCustomerProfileEdit && (
                    <div>
                        <Label htmlFor="tag">Nh√£n</Label>
                        <Select value={watchedTag} onValueChange={(value: CustomerFormData["tag"]) => setValue("tag", value)}>
                            <SelectTrigger id="tag">
                                <SelectValue placeholder="Ch·ªçn nh√£n" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="none">Kh√¥ng x√°c ƒë·ªãnh</SelectItem> {/* Thay ƒë·ªïi "all" th√†nh "" cho tr∆∞·ªùng h·ª£p kh√¥ng ch·ªçn */}
                                {tags.map((tag: CustomerTag) => (
                                    <SelectItem key={tag.id} value={tag.id}>
                                        {tag.name}
                                    </SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                        {errors.tag?.message && <p className="text-red-500 text-sm">{errors.tag.message}</p>}
                    </div>
                )}
                {isCustomerProfileEdit && <input type="hidden" {...register("tag")} />}

                {/* Nh√¢n Vi√™n Ph·ª• Tr√°ch */}
                {!isCustomerProfileEdit && (
                    <div>
                        <Label htmlFor="ownerId">Nh√¢n Vi√™n Ph·ª• Tr√°ch</Label>
                        <Select value={watchedOwnerId} onValueChange={(value: CustomerFormData["ownerId"]) => setValue("ownerId", value)}>
                            <SelectTrigger id="ownerId">
                                <SelectValue placeholder="Ch·ªçn nh√¢n vi√™n" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="none">Kh√¥ng x√°c ƒë·ªãnh</SelectItem> {/* Thay ƒë·ªïi "none" th√†nh "" cho tr∆∞·ªùng h·ª£p kh√¥ng ch·ªçn */}
                                {users.map((user: User) => (
                                    <SelectItem key={user.id} value={user.id}>
                                        {user.name || user.email}
                                    </SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                        {errors.ownerId?.message && <p className="text-red-500 text-sm">{errors.ownerId.message}</p>}
                    </div>
                )}
                {isCustomerProfileEdit && <input type="hidden" {...register("ownerId")} />}

                {/* Ngu·ªìn Kh√°ch H√†ng */}
                {!isCustomerProfileEdit && (
                    <div>
                        <Label htmlFor="source">Ngu·ªìn Kh√°ch H√†ng</Label>
                        <Select value={watchedSource} onValueChange={(value: CustomerFormData["source"]) => setValue("source", value)}>
                            <SelectTrigger id="source">
                                <SelectValue placeholder="Ch·ªçn ngu·ªìn kh√°ch h√†ng" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="other">Kh√°c</SelectItem>
                                <SelectItem value="referral">Gi·ªõi thi·ªáu</SelectItem>
                                <SelectItem value="website">Website</SelectItem>
                                <SelectItem value="event">Event</SelectItem>
                            </SelectContent>
                        </Select>
                        {errors.status?.message && <p className="text-red-500 text-sm">{errors.status.message}</p>}
                    </div>
                )}
                {isCustomerProfileEdit && <input type="hidden" {...register("source")} />}

                {/* Website, Facebook, Zalo, AvatarUrl */}
                
                <div>
                    <Label htmlFor="avatarUrl">·∫¢nh ƒê·∫°i Di·ªán (URL)</Label>
                    <Input id="avatarUrl" {...register("avatarUrl")} />
                    {errors.avatarUrl?.message && <p className="text-red-500 text-sm">{errors.avatarUrl.message}</p>}
                </div>

                {/* Ghi Ch√∫ */}
                <div className="md:col-span-2">
                    <Label htmlFor="notes">Ghi Ch√∫</Label>
                    <Textarea id="notes" rows={2} {...register("notes")} />
                    {errors.notes?.message && <p className="text-red-500 text-sm">{errors.notes.message}</p>}
                </div>
            </div>
            
            {/* Hi·ªÉn th·ªã l·ªói chung t·ª´ Server Action */}
            {state?.error && state.error !== "NEXT_REDIRECT" && !errors.code && !errors.root && (
                <div className="text-red-500 text-sm text-center mt-4">{state.error}</div>
            )}
            {errors.root?.message && (
                <div className="text-red-500 text-sm text-center mt-4">{errors.root.message}</div>
            )}

            <div className="flex justify-end space-x-2 mt-4">
                <Button type="button" variant="outline" onClick={handleCancel}>
                    H·ªßy
                </Button>
                <Button type="submit" disabled={pendingAction}>
                    {pendingAction && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    {initialData ? "C·∫≠p Nh·∫≠t" : "T·∫°o M·ªõi"}
                </Button>
            </div>
            {state?.success && (
                <p className="mt-4 text-green-600 text-center font-medium">
                    {initialData?.id
                        ? "C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng!"
                        : "T·∫°o kh√°ch h√†ng m·ªõi th√†nh c√¥ng!"}
                </p>
            )}

            {state?.error && (
                <p className="mt-4 text-red-600 text-center font-medium">
                    {state.error}
                </p>
            )}

            {state?.success && initialData?.id && (
                <div className="mt-4 flex justify-center">
                    <Button onClick={() => router.push("/crm/customers")}>
                        Quay v·ªÅ danh s√°ch kh√°ch h√†ng
                    </Button>
                </div>
            )}
        </form>
    );
}