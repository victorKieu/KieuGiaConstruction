import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ChevronLeft } from 'lucide-react';
// üí° B·ªï sung: Import useRouter t·ª´ next/navigation
import { useRouter } from 'next/navigation';

// H√†m gi·∫£ ƒë·ªãnh ƒë·ªÉ l·∫•y class badge v√† label
function getStatusLabel(status: string): string {
    // ... (logic c≈©)
    switch (status) {
        case "in_progress": return "ƒêang ti·∫øn h√†nh";
        case "completed": return "Ho√†n th√†nh";
        case "on_hold": return "T·∫°m d·ª´ng";
        default: return "Kh·ªüi t·∫°o";
    }
}
function getBadgeClass(status: string): string {
    // ... (logic c≈©)
    switch (status) {
        case "completed": return "bg-green-100 text-green-700";
        case "in_progress": return "bg-blue-100 text-blue-800";
        case "on_hold": return "bg-yellow-100 text-yellow-700";
        default: return "bg-gray-100 text-gray-700";
    }
}

// ƒê·ªãnh nghƒ©a props m·ªõi
interface ProjectHeaderProps {
    project: {
        name: string;
        code: string;
        status: string;
    };
    // üí° B·ªï sung: C√°c h√†m handler cho c√°c n√∫t
    onEditClick: () => void;
    onDeleteClick: () => void;
    onTaskClick: () => void;
    // onBack s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω n·ªôi b·ªô b·∫±ng useRouter
}


export default function ProjectHeader({ project, onEditClick, onDeleteClick, onTaskClick }: ProjectHeaderProps) {
    // üí° B·ªï sung: S·ª≠ d·ª•ng useRouter
    const router = useRouter();

    // H√†m x·ª≠ l√Ω Quay l·∫°i (d√πng cho c·∫£ n√∫t ChevronLeft v√† n√∫t Quay v·ªÅ)
    const handleBack = () => {
        router.back();
    };

    return (
        <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4">
            <div className='w-full'>
                {/* N√∫t Back - D√πng h√†m router.back() */}
                <div className="mb-2 -mt-4">
                    <button
                        onClick={handleBack} // üí° G√°n action
                        className="inline-flex items-center px-3 py-1.5 rounded-full text-sm tracking-wider
                                   text-indigo-700 bg-indigo-50 
                                   hover:bg-indigo-100 hover:shadow-sm
                                   transition duration-150 active:bg-indigo-200 font-semibold border border-indigo-200"
                        aria-label="Quay l·∫°i"
                    >
                        <ChevronLeft className="h-4 w-4 mr-1" />
                        <span>Quay l·∫°i</span>
                    </button>
                </div>

                {/* Ti√™u ƒë·ªÅ ch√≠nh */}
                <h1 className="text-3xl font-extrabold text-gray-800 leading-none mb-1">{project.name}</h1>

                {/* Th√¥ng tin ph·ª• */}
                <div className="flex items-center gap-4 mt-2 text-sm text-gray-500">
                    <span>M√£ d·ª± √°n: <span className="font-semibold text-gray-700">{project.code}</span></span>
                    <span className="h-4 border-l"></span>
                    <span>Tr·∫°ng th√°i:
                        <Badge className={`${getBadgeClass(project.status)} ml-2 border border-current`}>
                            {getStatusLabel(project.status)}
                        </Badge>
                    </span>
                </div>
            </div>

            {/* C√°c n√∫t h√†nh ƒë·ªông */}
            <div className="flex gap-2 mt-4 sm:mt-0 flex-shrink-0">
                <Button onClick={onTaskClick}>C√¥ng vi·ªác</Button>           {/* üí° G√°n prop */}
                <Button variant="outline" onClick={onEditClick}>Ch·ªânh s·ª≠a</Button> {/* üí° G√°n prop */}
                <Button variant="destructive" onClick={onDeleteClick}>X√≥a d·ª± √°n</Button> {/* üí° G√°n prop */}
            </div>
        </div>
    );
}