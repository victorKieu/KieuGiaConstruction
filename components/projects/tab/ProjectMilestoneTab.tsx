"use client"

import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { formatDate } from "@/lib/utils/utils"; // ‚úÖ Kh√¥i ph·ª•c import
import { MilestoneData, TaskData, MemberData, TaskStatus } from "@/types/project";
import TaskCreateModal from "@/components/tasks/TaskCreateModal";
import TaskEditModal from "@/components/tasks/TaskEditModal";
import { Button } from "@/components/ui/button";
// ‚úÖ IMPORT TaskCommentWrapper (Server Component) ƒë·ªÉ d√πng cho c∆° ch·∫ø Fallback
import TaskCommentWrapper from "@/components/tasks/TaskCommentWrapper";

// ‚úÖ B·ªï sung taskFeed v√†o props ƒë·ªÉ nh·∫≠n JSX ƒë√£ ƒë∆∞·ª£c Server render
interface ProjectMilestoneTabProps {
    projectId: string;
    milestones: MilestoneData[];
    tasks: TaskData[]; // V·∫´n nh·∫≠n ƒë·ªÉ hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£ng task
    members: MemberData[];
    taskFeed?: React.ReactNode; // ‚úÖ L√†m cho n√≥ OPTIONAL
}

// H√†m ph·ª• tr·ª£ cho Client-side rendering (c·∫ßn cho Fallback)
function getStatusLabel(status: TaskStatus) {
    switch (status) {
        case "completed":
        case "done":
            return "Ho√†n th√†nh";
        case "in_progress":
            return "ƒêang th·ª±c hi·ªán";
        case "pending":
        case "todo":
            return "C·∫ßn l√†m";
        case "on_hold":
            return "T·∫°m d·ª´ng";
        case "cancelled":
            return "ƒê√£ h·ªßy";
        default:
            return "Kh√¥ng x√°c ƒë·ªãnh";
    }
}


// ‚úÖ C·∫≠p nh·∫≠t destructuring ƒë·ªÉ nh·∫≠n taskFeed (optional)
export default function ProjectMilestoneTab({ projectId, tasks, members, taskFeed }: ProjectMilestoneTabProps) {

    // --- LOGIC HI·ªÇN TH·ªä TASK ---
    let taskContent;

    // 1. ∆ØU TI√äN: S·ª¨ D·ª§NG TASK FEED ƒê√É ƒê∆Ø·ª¢C SERVER RENDER (C√≥ b√¨nh lu·∫≠n)
    if (taskFeed) {
        taskContent = taskFeed;
    } else {
        // 2. FALLBACK: T·ª∞ RENDER L·∫†I TR√äN CLIENT (Kh√¥ng c√≥ b√¨nh lu·∫≠n t√≠ch h·ª£p)

        // === RENDER FALLBACK (KH√îNG B√åNH LU·∫¨N) ===
        taskContent = tasks.map((task) => (
            <div
                key={task.id}
                className="p-5 border rounded-xl shadow-sm bg-white" // ‚úÖ Thi·∫øt k·∫ø ki·ªÉu post
            >
                {/* HEADER C·ª¶A TASK (Th√¥ng tin ch√≠nh, n√∫t ch·ªânh s·ª≠a/x√≥a) */}
                <div className="flex justify-between items-start mb-3 border-b pb-3">
                    <div className="flex flex-col">
                        <p className="font-bold text-lg text-gray-800">{task.name}</p>
                        <div className="flex items-center space-x-3 text-xs text-gray-500 mt-1">
                            <span>B·∫Øt ƒë·∫ßu: {task.start_date ? formatDate(task.start_date) : "N/A"}</span>
                            <span>|</span>
                            <span>H·∫°n ch√≥t: {task.due_date ? formatDate(task.due_date) : "N/A"}</span>
                        </div>
                    </div>

                    {/* N√∫t Ch·ªânh s·ª≠a/X√≥a Task */}
                    <div className="flex items-center space-x-2 flex-shrink-0">
                        <TaskEditModal task={task} members={members} />
                    </div>
                </div>

                {/* BODY C·ª¶A TASK (M√¥ t·∫£, Tr·∫°ng th√°i, Ng∆∞·ªùi ƒë∆∞·ª£c giao) */}
                <p className="text-sm text-gray-600 whitespace-pre-wrap mb-4">
                    {task.description || "Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt."}
                </p>

                <div className="flex items-center justify-between border-b pb-3 mb-3 text-sm">
                    <div className="flex items-center space-x-4">
                        <span className="text-gray-600">
                            Ph√¢n c√¥ng: <span className="font-medium text-gray-800">{task.assigned_to?.name || "Ch∆∞a ph√¢n c√¥ng"}</span>
                        </span>
                        <span className={`px-2 py-0.5 rounded-full text-xs font-medium 
                            ${task.status === "completed" ? "bg-green-100 text-green-700" :
                                task.status === "in_progress" ? "bg-blue-100 text-blue-700" :
                                    "bg-gray-100 text-gray-700"
                            }`}
                        >
                            {getStatusLabel(task.status)}
                        </span>
                    </div>
                    <span className="text-sm font-semibold text-blue-600">Ti·∫øn ƒë·ªô: {task.progress || 0}%</span>
                </div>

                {/* FOOTER - Ph·∫ßn T∆∞∆°ng t√°c v√† B√¨nh lu·∫≠n (Ch·ªâ gi·ªØ l·∫°i placeholder) */}
                <div className="flex items-center space-x-4 text-gray-500 text-sm mb-3">
                    <Button variant="ghost" className="flex items-center px-2 text-sm text-blue-600 hover:bg-blue-50">
                        üëç Th√≠ch (0)
                    </Button>
                    <Button variant="ghost" className="flex items-center px-2 text-sm text-gray-600 hover:bg-gray-100">
                        üí¨ B√¨nh lu·∫≠n
                    </Button>
                </div>

                {/* L∆ØU √ù: Ph·∫ßn B√¨nh lu·∫≠n S·∫º B·ªä M·∫§T trong ch·∫ø ƒë·ªô Fallback n√†y */}
                <section className="mt-6 pt-4 border-t">
                    <p className="text-sm text-red-500">
                        ‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i h·ªá th·ªëng b√¨nh lu·∫≠n (L·ªói truy·ªÅn prop `taskFeed`).
                    </p>
                </section>
            </div>
        ));
    }
    // --- K·∫æT TH√öC LOGIC HI·ªÇN TH·ªä TASK ---


    return (
        <div className="space-y-6">

            {/* 1. Danh s√°ch C√¥ng vi·ªác (Tasks) V√Ä N√∫t T·∫°o C√¥ng vi·ªác */}
            <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    {/* S·ª≠ d·ª•ng tasks.length ƒë·ªÉ hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£ng task */}
                    <CardTitle className="text-lg font-semibold">Danh s√°ch C√¥ng vi·ªác ({tasks.length})</CardTitle>
                    <TaskCreateModal projectId={projectId} members={members} />
                </CardHeader>

                <CardContent>
                    {tasks.length === 0 ? (
                        <p className="text-sm text-muted-foreground">Ch∆∞a c√≥ c√¥ng vi·ªác n√†o ƒë∆∞·ª£c t·∫°o. H√£y nh·∫•n n√∫t ƒë·ªÉ t·∫°o c√¥ng vi·ªác ƒë·∫ßu ti√™n.</p>
                    ) : (
                        <div className="grid gap-6">
                            {/* Hi·ªÉn th·ªã n·ªôi dung ƒë√£ ƒë∆∞·ª£c x√°c ƒë·ªãnh ·ªü tr√™n (taskFeed ho·∫∑c Fallback) */}
                            {taskContent}
                        </div>
                    )}
                </CardContent>
            </Card>
        </div>
    );
}
